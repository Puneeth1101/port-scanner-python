from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.padding import PKCS7
from cryptography.hazmat.backends import default_backend
import os
import base64

# Function to derive a key using a password
def derive_key(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# Function to encrypt data
def encrypt(data, password):
    # Generate salt and derive key
    salt = os.urandom(16)
    key = derive_key(password, salt)
    
    # Generate IV (Initialization Vector)
    iv = os.urandom(16)
    
    # Create cipher and encryptor
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    
    # Pad the data
    padder = PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(data.encode()) + padder.finalize()
    
    # Encrypt the data
    encrypted = encryptor.update(padded_data) + encryptor.finalize()
    
    # Return the encrypted data with salt and IV
    return base64.b64encode(salt + iv + encrypted).decode()

# Function to decrypt data
def decrypt(encrypted_data, password):
    # Decode the base64 data
    encrypted_data = base64.b64decode(encrypted_data)
    
    # Extract salt, IV, and ciphertext
    salt = encrypted_data[:16]
    iv = encrypted_data[16:32]
    ciphertext = encrypted_data[32:]
    
    # Derive key using the same salt
    key = derive_key(password, salt)
    
    # Create cipher and decryptor
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    
    # Decrypt and unpad the data
    padded_data = decryptor.update(ciphertext) + decryptor.finalize()
    unpadder = PKCS7(algorithms.AES.block_size).unpadder()
    data = unpadder.update(padded_data) + unpadder.finalize()
    
    return data.decode()

# Example Usage
if __name__ == "__main__":
    password = "strongpassword"
    plaintext = "This is a secret message."

    # Encrypt the data
    encrypted_data = encrypt(plaintext, password)
    print(f"Encrypted: {encrypted_data}")

    # Decrypt the data
    decrypted_data = decrypt(encrypted_data, password)
    print(f"Decrypted: {decrypted_data}")
